<application>
  <component name="AppStorage">
    <histories>
      <item value="spurious" />
      <item value="excessive" />
      <item value="This indicates that the ClientCall may now be capable of sending additional messages (via sendMessage) without requiring excessive buffering internally" />
      <item value="trailers" />
      <item value="The ClientCall has been closed. Any additional calls to the ClientCall will not be processed by the server. No further receiving will occur and no further notifications will be made." />
      <item value="Since Metadata is not thread-safe, the caller must not access (read or write) headers after this point." />
      <item value="Headers always precede messages." />
      <item value=" thread-hostile" />
      <item value="The following snippet demonstrates a bi-directional streaming case, where the client sends requests produced by a fictional makeNextRequest() in a flow-control-compliant manner, and notifies gRPC library to receive additional response after one is consumed by a fictional processResponse()" />
      <item value="There is a race between cancel and the completionfailure of the RPC in other ways. If cancel won the race, Listener.onClose() is called with CANCELLED. Otherwise, Listener.onClose() is called with whatever status the RPC was finished. We ensure that at most one is called." />
      <item value=" it has no bearing on the permitted operations on ClientCall (but it may impact whether they do anything)" />
      <item value="Methods are guaranteed to be non-blocking. Not thread-safe except for request, which may be called from any thread.&#10;" />
      <item value="No generic method for determining message receipt or providing acknowledgement is provided. Applications are expected to utilize normal payload messages for such signals, as a response naturally acknowledges its request.&#10;" />
      <item value=", with the exception of " />
      <item value="exception" />
      <item value="start must be called prior to calling any other methods, with the exception of cancel. Whereas cancel must not be followed by any other methods, but can be called more than once, while only the first one has effect." />
      <item value=". Common reasons for doing so would be the need to interact with flow-control or when acting as a generic proxy for arbitrary operations." />
      <item value="consume" />
      <item value="opposed" />
      <item value="More advanced usages may consume this interface directly as opposed to using a stub" />
      <item value="trailer" />
      <item value="Hedging Plan" />
      <item value="he identifier of the encoding used to encode the bytes in value. The supported values in this implementation are LATIN1 UTF16&#10;Implementation Note:&#10;This field is trusted by the VM, and is a subject to constant folding if String instance is constant. Overwriting this field after construction will cause problems." />
      <item value="This field is trusted by the VM, and is a subject to constant folding if String instance is constant. Overwriting this field after construction will cause problems. Additionally, it is marked with Stable to trust the contents of the array. No other facility in JDK provides this functionality (yet). Stable is safe here, because value is never null." />
      <item value="conduct" />
      <item value="PARTIAL" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="27" />
        <entry key="ENGLISH" value="28" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1645597142969" />
  </component>
  <component name="Settings">
    <option name="keepFormat" value="true" />
  </component>
</application>